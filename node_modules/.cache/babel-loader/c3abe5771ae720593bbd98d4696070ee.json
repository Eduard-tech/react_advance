{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalAmount: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      console.log(\"inside reducer\");\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/home/lewagon/code/Eduard-tech/Udemy-React/redux_advannce/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","totalAmount","reducers","addItemToCart","state","action","console","log","newItem","payload","existingItem","find","item","id","push","itemId","price","quantity","totalPrice","title","removeItemFromCart","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE,CAFH;AAGZC,IAAAA,WAAW,EAAE;AAHD,GAFc;AAO5BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,YAAMC,OAAO,GAAGH,MAAM,CAACI,OAAvB;AACA,YAAMC,YAAY,GAAGN,KAAK,CAACL,KAAN,CAAYY,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA7C,CAArB;;AACA,UAAG,CAACH,YAAJ,EAAkB;AAChBN,QAAAA,KAAK,CAACL,KAAN,CAAYe,IAAZ,CAAiB;AACfC,UAAAA,MAAM,EAAEP,OAAO,CAACK,EADD;AAEfG,UAAAA,KAAK,EAAER,OAAO,CAACQ,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAEV,OAAO,CAACQ,KAJL;AAKfnB,UAAAA,IAAI,EAAEW,OAAO,CAACW;AALC,SAAjB;AAOD,OARD,MAQO;AACLT,QAAAA,YAAY,CAACO,QAAb;AACAP,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BV,OAAO,CAACQ,KAA5D;AACD;AACF,KAjBQ;;AAmBTI,IAAAA,kBAAkB,CAAChB,KAAD,EAAQC,MAAR,EAAgB;AACjC,YAAMQ,EAAE,GAAGR,MAAM,CAACI,OAAlB;AACA,YAAMC,YAAY,GAAGN,KAAK,CAACL,KAAN,CAAYY,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;AACAT,MAAAA,KAAK,CAACJ,aAAN;;AACA,UAAIU,YAAY,CAACO,QAAb,KAA0B,CAA9B,EAAiC;AAC/Bb,QAAAA,KAAK,CAACL,KAAN,GAAcK,KAAK,CAACL,KAAN,CAAYsB,MAAZ,CAAmBT,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd;AACD,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACO,QAAb;AACAP,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACM,KAAjE;AACD;AACF;;AA7BS;AAPkB,CAAD,CAA7B;AA0CA,OAAO,MAAMM,WAAW,GAAG1B,SAAS,CAAC2B,OAA9B;AAEP,eAAe3B,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: { \n    items: [],\n    totalQuantity: 0,\n    totalAmount: 0\n  },\n  reducers: {\n   addItemToCart(state, action) {\n     console.log(\"inside reducer\")\n     const newItem = action.payload;\n     const existingItem = state.items.find(item => item.id === newItem.id)\n     if(!existingItem) {\n       state.items.push({\n         itemId: newItem.id,\n         price: newItem.price,\n         quantity: 1,\n         totalPrice: newItem.price,\n         name: newItem.title\n       })\n     } else {\n       existingItem.quantity++;\n       existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n     }\n   },\n\n   removeItemFromCart(state, action) {\n    const id = action.payload;\n    const existingItem = state.items.find(item => item.id === id);\n    state.totalQuantity--;\n    if (existingItem.quantity === 1) {\n      state.items = state.items.filter(item => item.id !== id)\n    } else {\n      existingItem.quantity--;\n      existingItem.totalPrice = existingItem.totalPrice - existingItem.price\n    }\n  }\n\n\n  }\n})\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}