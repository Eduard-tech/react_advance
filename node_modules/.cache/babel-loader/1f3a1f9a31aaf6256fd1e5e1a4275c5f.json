{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalAmount: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\n\nconst sendCartData = cartData => {\n  return dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n  };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/home/lewagon/code/Eduard-tech/Udemy-React/redux_advannce/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","totalAmount","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cartData","dispatch","showNotification","status","message","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC5BG,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE,CAFH;AAGZC,IAAAA,WAAW,EAAE;AAHD,GAFc;AAO5BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAN,CAAYU,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA7C,CAArB;AACAP,MAAAA,KAAK,CAACJ,aAAN;;AACA,UAAG,CAACQ,YAAJ,EAAkB;AAChBJ,QAAAA,KAAK,CAACL,KAAN,CAAYa,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADG;AAEfE,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAET,OAAO,CAACO,KAJL;AAKfhB,UAAAA,IAAI,EAAES,OAAO,CAACU;AALC,SAAjB;AAOA,OARF,MAQQ;AACLR,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BT,OAAO,CAACO,KAA5D;AACF;AACF,KAjBQ;;AAmBTI,IAAAA,kBAAkB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AACjC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAN,CAAYU,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;AACAP,MAAAA,KAAK,CAACJ,aAAN;;AACA,UAAIQ,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAiC;AAC/BV,QAAAA,KAAK,CAACL,KAAN,GAAcK,KAAK,CAACL,KAAN,CAAYmB,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd;AACD,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACD;AACF;;AA7BS;AAPkB,CAAD,CAA7B;;AA2CA,MAAMM,YAAY,GAAIC,QAAD,IAAc;AACjC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CACN1B,SAAS,CAAC2B,gBAAV,CAA2B;AACzBC,MAAAA,MAAM,EAAE,SADiB;AAEzBP,MAAAA,KAAK,EAAE,YAFkB;AAGzBQ,MAAAA,OAAO,EAAE;AAHgB,KAA3B,CADM,CAAR;AAOD,GARD;AASD,CAVD;;AAaA,OAAO,MAAMC,WAAW,GAAG7B,SAAS,CAAC8B,OAA9B;AAEP,eAAe9B,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: { \n    items: [],\n    totalQuantity: 0,\n    totalAmount: 0\n  },\n  reducers: {\n   addItemToCart(state, action) {\n     const newItem = action.payload;\n     const existingItem = state.items.find(item => item.id === newItem.id)\n     state.totalQuantity++;\n     if(!existingItem) {\n       state.items.push({\n         id: newItem.id,\n         price: newItem.price,\n         quantity: 1,\n         totalPrice: newItem.price,\n         name: newItem.title\n        })\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n     }\n   },\n\n   removeItemFromCart(state, action) {\n    const id = action.payload;\n    const existingItem = state.items.find(item => item.id === id);\n    state.totalQuantity--;\n    if (existingItem.quantity === 1) {\n      state.items = state.items.filter(item => item.id !== id)\n    } else {\n      existingItem.quantity--;\n      existingItem.totalPrice = existingItem.totalPrice - existingItem.price\n    }\n  }\n\n\n  }\n})\n\n\nconst sendCartData = (cartData) => {\n  return (dispatch) => {\n    dispatch(\n      uiActions.showNotification({\n        status: \"pending\",\n        title: \"Sending...\",\n        message: \"Sending cart data!\",\n      })\n    );\n  }\n}\n\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}